TAP version 14
# Subtest: setup
    ok 1 - Setup completed
    1..1
ok 1 - setup # time=460.842ms

# Subtest: NotesService - createNote
    # Subtest: should create a note with valid data
        ok 1 - Note should have an ID
        ok 2 - Title should match
        ok 3 - Body should match
        ok 4 - Should have createdAt timestamp
        ok 5 - Should have updatedAt timestamp
        1..5
    ok 1 - should create a note with valid data # time=6.853ms
    
    # Subtest: should trim whitespace from title and body
        ok 1 - Title should be trimmed
        ok 2 - Body should be trimmed
        1..2
    ok 2 - should trim whitespace from title and body # time=1.907ms
    
    # Subtest: should throw error if title is missing
        ok 1 - Should throw validation error
        1..1
    ok 3 - should throw error if title is missing # time=0.576ms
    
    # Subtest: should throw error if body is missing
        ok 1 - Should throw validation error
        1..1
    ok 4 - should throw error if body is missing # time=0.214ms
    
    1..4
ok 2 - NotesService - createNote # time=18.442ms

# Subtest: NotesService - getAllNotes
    # Subtest: should return empty array when no notes exist
        ok 1 - Result should be an array
        ok 2 - Should return empty array
        1..2
    ok 1 - should return empty array when no notes exist # time=3.176ms
    
    # Subtest: should return all notes
        ok 1 - Should return 3 notes
        ok 2 - Should be sorted by createdAt desc (most recent first)
        1..2
    ok 2 - should return all notes # time=28.544ms
    
    # Subtest: should respect limit option
        ok 1 - Should return only 2 notes
        1..1
    ok 3 - should respect limit option # time=8.403ms
    
    # Subtest: should respect skip option
        ok 1 - Should return 2 notes
        ok 2 - Should skip the first note (most recent)
        1..2
    ok 4 - should respect skip option # time=26.418ms
    
    1..4
ok 3 - NotesService - getAllNotes # time=74.252ms

# Subtest: NotesService - updateNote
    # Subtest: should update note with valid data
        ok 1 - Should return updated note
        ok 2 - Title should be updated
        ok 3 - Body should be updated
        ok 4 - updatedAt should be changed
        1..4
    ok 1 - should update note with valid data # time=5.587ms
    
    # Subtest: should return null for non-existent ID
        ok 1 - Should return null for non-existent ID
        1..1
    ok 2 - should return null for non-existent ID # time=1.437ms
    
    # Subtest: should return null for invalid ID format
        ok 1 - Should return null for invalid ID
        1..1
    ok 3 - should return null for invalid ID format # time=0.194ms
    
    1..3
ok 4 - NotesService - updateNote # time=10.103ms

# Subtest: NotesService - deleteNote
    # Subtest: should delete note with valid ID
        ok 1 - Should return true for successful deletion
        ok 2 - Note should be deleted from database
        1..2
    ok 1 - should delete note with valid ID # time=2.778ms
    
    # Subtest: should return false for non-existent ID
        ok 1 - Should return false for non-existent ID
        1..1
    ok 2 - should return false for non-existent ID # time=0.516ms
    
    # Subtest: should return false for invalid ID format
        ok 1 - Should return false for invalid ID
        1..1
    ok 3 - should return false for invalid ID format # time=0.146ms
    
    1..3
ok 5 - NotesService - deleteNote # time=5.794ms

# Subtest: NotesService - vectorSearch
    # Subtest: should return empty array when no notes with embeddings exist
        ok 1 - Should return empty array
        1..1
    ok 1 - should return empty array when no notes with embeddings exist # time=2.314ms
    
    # Subtest: should calculate similarity scores correctly
        ok 1 - Should find similar notes
        ok 2 - Should respect threshold
        ok 3 - Similarity should be between 0 and 1
        1..3
    ok 2 - should calculate similarity scores correctly # time=4.749ms
    
    # Subtest: should respect limit and threshold options
        ok 1 - Should respect limit
        ok 2 - Should respect threshold
        1..2
    ok 3 - should respect limit and threshold options # time=9.453ms
    
    1..3
ok 6 - NotesService - vectorSearch # time=19.621ms

# Subtest: NotesService - utility methods
    # Subtest: generateMockEmbedding should return normalized vector
        ok 1 - Should return array
        ok 2 - Should return 384-dimensional vector
        ok 3 - Vector should be normalized
        1..3
    ok 1 - generateMockEmbedding should return normalized vector # time=0.328ms
    
    # Subtest: calculateCosineSimilarity should work correctly
        ok 1 - Identical vectors should have similarity 1
        ok 2 - Orthogonal vectors should have similarity 0
        1..2
    ok 2 - calculateCosineSimilarity should work correctly # time=0.296ms
    
    1..2
ok 7 - NotesService - utility methods # time=1.993ms

# Subtest: NotesService - getNoteById
    # Subtest: should return note when found
        ok 1 - Should return a note
        ok 2 - Should return the correct note
        ok 3 - Title should match
        1..3
    ok 1 - should return note when found # time=1.402ms
    
    # Subtest: should return null for non-existent ID
        ok 1 - Should return null for non-existent ID
        1..1
    ok 2 - should return null for non-existent ID # time=0.602ms
    
    # Subtest: should return null for invalid ID format
        ok 1 - Should return null for invalid ID
        1..1
    ok 3 - should return null for invalid ID format # time=0.133ms
    
    1..3
ok 8 - NotesService - getNoteById # time=4.123ms

# Subtest: NotesService - searchNotes
    # Subtest: should return empty array for empty query
        ok 1 - Should return empty array for empty query
        1..1
    ok 1 - should return empty array for empty query # time=0.193ms
    
    # Subtest: should search by title
        ok 1 - Should find notes
        ok 2 - Should find JavaScript note
        1..2
    ok 2 - should search by title # time=1.548ms
    
    # Subtest: should search by body content
        ok 1 - Should find notes
        ok 2 - Should find note with components in body
        1..2
    ok 3 - should search by body content # time=0.656ms
    
    # Subtest: should be case insensitive
        ok 1 - Should find notes with case insensitive search
        1..1
    ok 4 - should be case insensitive # time=0.9ms
    
    # Subtest: should respect limit option
        ok 1 - Should respect limit option
        1..1
    ok 5 - should respect limit option # time=1.026ms
    
    1..5
ok 9 - NotesService - searchNotes # time=18.272ms

# Subtest: NotesService - updateNote
    # Subtest: should update note successfully
        ok 1 - Should return updated note
        ok 2 - Title should be updated
        ok 3 - Body should be updated
        ok 4 - UpdatedAt should be different
        1..4
    ok 1 - should update note successfully # time=1.395ms
    
    # Subtest: should return null for non-existent note
        ok 1 - Should return null for non-existent note
        1..1
    ok 2 - should return null for non-existent note # time=0.581ms
    
    # Subtest: should return null for invalid ID
        ok 1 - Should return null for invalid ID
        1..1
    ok 3 - should return null for invalid ID # time=0.122ms
    
    1..3
ok 10 - NotesService - updateNote # time=4.154ms

# Subtest: NotesService - deleteNote
    # Subtest: should delete note successfully
        ok 1 - Should return true for successful deletion
        ok 2 - Note should be deleted from database
        1..2
    ok 1 - should delete note successfully # time=1.465ms
    
    # Subtest: should return false for non-existent note
        ok 1 - Should return false for non-existent note
        1..1
    ok 2 - should return false for non-existent note # time=0.527ms
    
    # Subtest: should return false for invalid ID
        ok 1 - Should return false for invalid ID
        1..1
    ok 3 - should return false for invalid ID # time=0.145ms
    
    1..3
ok 11 - NotesService - deleteNote # time=3.945ms

# Subtest: NotesService - vectorSearch (bonus)
    # Subtest: should generate mock embeddings
        ok 1 - Should return an array
        ok 2 - Should have 384 dimensions
        ok 3 - All values should be numbers
        1..3
    ok 1 - should generate mock embeddings # time=0.307ms
    
    # Subtest: should calculate cosine similarity
        ok 1 - Identical vectors should have similarity 1
        ok 2 - Orthogonal vectors should have similarity 0
        1..2
    ok 2 - should calculate cosine similarity # time=0.203ms
    
    # Subtest: should return empty array when no notes have embeddings
        ok 1 - Should return empty array when no embeddings exist
        1..1
    ok 3 - should return empty array when no notes have embeddings # time=1.341ms
    
    1..3
ok 12 - NotesService - vectorSearch (bonus) # time=3.678ms

1..12
